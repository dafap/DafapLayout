{"name":"Home","tagline":"This module allows to manage layouts in a project. We can define a particular layout for errors (404 and exceptions), an individual layout for each module or each controller, a default layout for all modules or conrollers for which we do not set specific layout. Layouts accept parameters from a configuration file, specifying eg strings, css files, script files, images ...","body":"﻿# DafapLayout\r\n***\r\n\r\n## 1. Que fait ce module ?\r\n-----------------------\r\nCe module permet de : \r\n * choisir un layout par défaut, un layout pour les erreurs (404 et exceptions) et autant de layouts particuliers que nécessaire appliqués à des modules ou à des contrôleurs.\r\n * passer des paramètres aux layouts à partir d'un fichier de configuration.\r\n\r\nIl offre aussi trois aides de vue : \r\n * getParameter renvoie un paramètre de la configuration, ou null s'il n'est pas présent. \r\n * getHeadLinks permet de mettre en place toutes les balises `<link>` (css, favicon, etc.) dont les paramètres sont passés par la configuration.\r\n * getHeadScripts permet de mettre en place toutes les balises `<script>` qu'elles soient définies par des fichiers ou par des chaines contenant les scripts.\r\n\r\n\r\n# 2. Comment configurer le module ?\r\n---------------------------------\r\nPour configurer le module, il faut :\r\n* déclarer le module dans le fichier config/application.config.php\r\n* copier le fichier DafapLayout/config/dafap-layout.global.dist.php dans le dossier config/autoload sous le \r\n   nom de dafap-layout.global.php de votre application et l'adapter à votre besoin en respectant la structure \r\n   indiquée plus loin.\r\n\r\n## 2.1 Comment déclarer ce module ?\r\n--------------------------------\r\n   La déclaration du module se fait en deux étapes :\r\n* Ajouter le nom du module dans le tableau 'modules' du fichier config/application.config.php de votre application. \r\n      Etant donné que ce module est totalement indépendant, peu importe l'ordre dans ce module dans la liste.\r\n* S'assurer que les chemins indiqués dans la tableau 'module_paths' permettent d'accéder au module. \r\n      En particulier, si ce module est monté dans vendor sans l'aide de composer.phar[1], il faut rajouter son chemin dans le tableau 'module_paths'.\r\n\r\n## 2.2 Structure du fichier de configuration\r\n-----------------------------------------\r\nLe fichier config/autoload/dafap-layout.global.php contient les paramètres nécessaires à votre situation.\r\n* un layout particulier pour les erreurs 404 et les exceptions\r\n* un layout général qui s'appliquera par défaut à tout module ou tout contrôleur pour lesquels un layout particulier n'a pas été configuré\r\n* autant de layouts que nécessaire pour les modules\r\n* autant de layouts que nécessaire pour les contrôleurs\r\n\r\n### 2.2.1 Le layout utilisé pour les erreurs 404 et les exceptions\r\n\r\na) 'layout/error' doit être déclaré dans le 'view_manager' parmi les 'template_map' de l'application[2]. \r\nCet alias pointe sur le fichier layout qui sera utilisé pour les erreurs 404 et les exceptions. \r\nCet alias ne doit pas être modifié[3].\r\n\r\nb) Si ce layout utilise des paramètres de configuration (fichiers css, favicon, images, nom d'organisation ...), il doit être déclaré dans le tableau 'parameter' de 'layout_manager' (voir la structure plus loin).\r\n\r\n### 2.2.2 Le layout à utiliser par défaut\r\n\r\na) 'layout/defaults' doit être déclaré dans le 'view_manager' parmi les 'template_map' de l'application[2]. \r\nCet alias pointe sur le fichier layout qui sera utilisé par défaut, pour tous les modules ou contrôleurs pour lesquels un template particulier n'a pas été déclaré.\r\n\r\nb) Il doit ensuite être déclaré dans le tableau 'layout_map' de 'layout_manager' de la façon impérative suivante : \r\n            `'defaults' => 'layout/defaults'`\r\n\r\nc) Enfin, si ce layout utilise des paramètres de configuration (fichiers css, favicon, images, nom d'organisation ...), il doit être déclaré dans le tableau 'parameter' de 'layout_manager' (voir la structure plus loin).\r\n\r\n### 2.2.3 Le layout à utiliser pour un module particulier\r\n\r\nEnvisageons que tout un module de namespace MonModule doive utiliser un layout particulier enregistré dans le fichier 'MonModule\\view\\layout\\layout.phtml'.\r\n\r\na) Il doit être déclaré dans le 'view_manager' parmi les 'template_map' de l’application[2]. \r\nPar cohérence, il est souhaitable d’utiliser le namespace du module dans la clé. \r\nPour notre exemple, on peut utiliser : 'layout/monModule'[2].\r\n\r\nb) Il doit être déclaré dans le tableau 'layout_map' de 'layout_manager' de la façon suivante : \r\n            `'namespace' => 'clé du fichier layout'`\t\t\r\nPour notre exemple, on doit déclarer, 'MonModule' => 'layout/monModule'.\r\n\r\nc) Si ce layout utilise des paramètres de configuration  (fichiers css, favicon, images, nom d'organisation ...), il doit être déclaré dans le tableau 'parameter' de 'layout_manager' (voir la structure plus loin).\r\n\r\n### 2.2.4 Le layout à utiliser pour un contrôleur particulier\r\n\r\nEnvisageons qu'un contrôleur dont la classe est MonModule\\Controller\\SpecialController doive utiliser un layout particulier enregistré dans le fichier 'MonModule\\view\\layout\\special.phtml'.\r\n\r\na) Il doit être déclaré dans le 'view_manager' parmi les 'template_map' de l’application[2]. \r\nPar cohérence, il est souhaitable d’utiliser le nom du controller dans la clé. \r\nPour notre exemple, on peut utiliser : 'layout/specialController'[2].\r\n\r\nb) Il doit être déclaré dans le tableau 'layout_map' de 'layout_manager' de la façon suivante :\r\n           `'nom de la classe' => 'clé du fichier layout'`\r\nPour notre exemple, on doit déclarer : 'MonModule\\Controller\\SpecialController' => 'layout/specialController').\r\n_Attention à la case des caractères pour le nom de la classe. Se référer à la note [2] pour l'alias du layout._ \r\n\r\nc) Si ce layout utilise des paramètres de configuration  (fichiers css, favicon, images, nom d'organisation ...), il doit être déclaré dans le tableau 'parameter' de 'layout_manager' (voir la structure ci-dessous).\r\n\r\nNotes :\r\n[1] Si on utilise composer.phar, il sera rajouté automatiquement dans les fichiers\r\n\r\n[2] Dans le tableau 'template_map' de 'view_manager', les clés sont de la forme 'layout/alias' où alias commence toujours par une minuscule.\r\n\r\n[3] Utilisé dans la classe LayoutErrorListener\r\n\r\n# 3. Structure des paramètres (clé 'parameter' de 'layout_manager')\r\n-----------------------------------------------------------------\r\n   \r\n## 3.1 Structure générale\r\n   ----------------------\r\nLa structure générale du 'layout_manager' est fixée dans DafapLayout/config/module.config.php et ne doit pas être modifiée.\r\n\r\n    `'layout_manager' => array(`\r\n        `'layout_map' => array(),`\r\n        `'parameter' => array()`\r\n    `),`\r\n    \r\nLe tableau 'layout_map' doit dresser la liste des associations entre les namespaces des modules ou les classes des contrôleurs et les alias des layouts.\r\n    Exemple :\r\n\r\n        'layout_map' => array(\r\n            'defaults' => 'layout/defaults',\r\n            'MonModule' => 'layout/monModule',\r\n            'MonModule\\Controller\\SpecialController' => 'layout/specialController'\r\n        ),\r\n\r\nA noter qu'on ne déclare pas le 'layout/error' dans cette liste.    \r\n    \r\nLe tableau 'parameter' contient une description des paramètres à passer aux différents layouts de la façon suivante :\r\n\r\n        'parameter' => array(\r\n            'layout/error' => array(),\r\n            'layout/defaults' => array(),\r\n            'layout/monModule => array(),\r\n            'layout/specialController => array(),\r\n        ),\r\n\r\nC'est le tableau correspondant au layout qui sera passé au layout dans sa propriété `$this->parameter`. On doit donc y déclarer tout ce que le layout doit connaitre.\r\n    \r\n## 3.2 Exemple de configuration pour un layout\r\n\r\n    'layout_manager' => array(\r\n        'layout_map' => array(`\r\n            'defaults' => 'layout/defaults',\r\n            'MonModule' => 'layout/monModule',\r\n            'MonModule\\Controller\\SpecialController' => 'layout/specialController'\r\n        ),\r\n        'parameter' => array(\r\n            'layout/error' => array(\r\n                'favicon' => '/img/favicon.ico'\r\n                'css' => array(\r\n                    '/css/style.css',\r\n                    '/css/nav.css',\r\n                    array(\r\n                        'href' => '/css/nav-ie7.css',\r\n                        'media' => 'screen',\r\n                        'conditionalStylesheet' => 'lt IE7',\r\n                        'extras' => array('id' => 'dafap')\r\n                    )\r\n                )\r\n            ),\r\n            'layout/defaults' => array(...),\r\n            'layout/monModule => array(\r\n                ...\r\n                'js-file' => array(\r\n                    '/js/bootstrap.min.js',\r\n                    '/js/jquery.min.js',\r\n                    array(\r\n                        'src' => '/js/respond.min.js',\r\n                        'type' => 'text/javascript',\r\n                        'attrs' => array(\r\n                            'conditional' => 'lt IE 9'\r\n                        )\r\n                    ),\r\n                    array(\r\n                        'src' => '/js/html5shiv.js',\r\n                        'type' => 'text/javascript',\r\n                        'attrs' => array(\r\n                            'conditional' => 'lt IE 9'\r\n                        )\r\n                    )\r\n                ),\r\n                'js-script' => array(<<<EOD\r\n    function pageRetour(controller, action) {\r\n        window.location.href = '\" . $base . \"index.php/' + controller + '/' + action;\r\n    }\r\n    EOD\r\n                )\r\n                ...\r\n            ),\r\n            'layout/specialController => array(...),\r\n        ),\r\n    )\r\n\r\nOn peut définir tous les paramètres qu'on veut, sans exception.\r\n   \r\n# 4. Mode d'emploi des aides de vue\r\n---------------------------------  \r\n \r\n## 4.1 Utilisation de getParameter\r\n   -------------------------------\r\n   Cette aide de vue prend 2 paramètres : \r\n\r\n     $this->getParameter($needle, $haystack)\r\n     où $needle est la clé recherchée dans le tableau $haystack\r\n\r\n   Elle renvoie la valeur associée à cette clé ou null si la clé est absente.\r\n   \r\n   \r\n## 4.2 Utilisation de getHeadLinks\r\n   ----------------------------\r\n   Cette aide de vue permet de mettre en place le favicon et les fichiers css à charger dans la page.\r\n   En supposant que dans le tableau 'parameter' de 'layout_manager' on ait défini pour notre layout les clés favicon et css comme exposé pour le layout/error de la section 3.2, on écrira dans le code du layout :\r\n\r\n    <?php\r\n         echo $this->getHeadLinks($this->basePath(), $this->getParameter('favicon', $this->parameter), $this->getParameter('css', $this->parameter));\r\n    ?>\r\n   \r\n   A noter que le tableau 'css' est constitué des url des fichiers css (url de ces fichier à partir de index.php) et/ou de tableaux structurés \r\n\r\n    array('href' => url du fichier,\r\n         'media' => nom du media auquel s'applique la css,\r\n         'conditionalStylesheet' => chaine exprimant la condition,\r\n         'extras' => tout ce qu'on veut rajouter dans la balise <link> comme un 'id' par exemple\r\n    )\r\n\r\n    * s'il n'y a pas de condition, on associe la valeur true\r\n    * s'il n'y a pas d'extras, on associe un tableau vide array()\r\n   \r\n## 4.3 Utilisation de getHeadScripts\r\n   ------------------------------------------\r\n   Cette aide de vue permet de mettre en place les scripts dans le <head> de notre page.\r\n   En supposant que dans le tableau 'parameter' de 'layout_manager' on ait défini pour notre layout la clé 'js-file' et la clé 'js-script'\r\n   comme pour layout/monModule de l'exemple 3.2, on écrira dans le code du layout :\r\n\r\n     <?php\r\n         echo $this->getHeadScripts($this->basePath(), $this->getParameter('js-file', $this->parameter), $this->getParameter('js-script', $this->parameter));\r\n     ?>\r\n   \r\n   A noter que le tableau 'js-file' est constitué des url des  fichiers de scripts (relatives à index.php) et/ou de tableaux structurés\r\n\r\n    array( 'src' => url du fichier,\r\n          'type' => 'text/javascript', // ou 'text/x-jquery-tmpl' ou autre si nécessaire ...\r\n          'attrs' => array() // peut contenir par exemple les clés 'conditional', 'id', 'noescape' ...\r\n    )\r\n\r\n   Et le tableau 'js-script' passe directementd des scripts sous forme de chaîne de caractères. Ce dernier tableau est optionnel.\r\n\r\n# 5. Credits et License\r\n---------------------\r\nAuthor : Alain Pomirol <pomirol@gmail.com>\r\nCompagny : Dafap informatique <dafap@free.fr>\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}